import requests
import os
import re
from dotenv import load_dotenv
from logging_config import setup_logger
from data_collectors.helix_validator import get_helix_token

# –õ–æ–≥–≥–µ—Ä
logger = setup_logger("helix_api")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
BASE_URL = 'https://api.twitch.tv/helix'

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ helix_validator
TOKEN = get_helix_token(CLIENT_ID, CLIENT_SECRET)
if not TOKEN:
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit(1)


def get_headers():
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Helix API."""
    return {
        'Authorization': f'Bearer {TOKEN}',
        'Client-Id': CLIENT_ID
    }
def get_streamer_id(vod_id):
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Å—Ç—Ä–∏–º–µ—Ä–∞ –ø–æ ID VOD."""
    vod_data = get_times_stream_info(vod_id)
    if vod_data and "user_id" in vod_data:
        return vod_data["user_id"]
    return None

def make_request(endpoint, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Twitch Helix –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏."""
    try:
        response = requests.get(f'{BASE_URL}{endpoint}', headers=get_headers(), params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except ValueError:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç.")
    return None


def get_user_info(username):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Twitch –ø–æ –µ–≥–æ –ª–æ–≥–∏–Ω—É."""
    logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}")
    user_info = make_request('/users', {'login': username})
    if user_info and user_info.get('data'):
        user = user_info['data'][0]
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['display_name']} (ID: {user['id']})")
        return user
    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None


def get_times_stream_info(vod_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VOD –ø–æ –µ–≥–æ ID."""
    logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VOD —Å ID {vod_id}")
    vod_info = make_request('/videos', {'id': vod_id})
    if vod_info and vod_info.get('data'):
        logger.info(f"üìº –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {vod_info['data'][0]['title']}")
        return vod_info['data'][0]
    logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å ID '{vod_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return None


def get_stream_info(username):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ {username}")
    stream_info = make_request('/streams', {'user_login': username})
    if stream_info and stream_info.get('data'):
        logger.info(f"üì° –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞: {stream_info['data'][0]['title']}")
        return stream_info['data'][0]
    logger.info(f"‚ÑπÔ∏è –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —É {username} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
    return None


def get_channel_info(broadcaster_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ ID –≤–µ–¥—É—â–µ–≥–æ."""
    logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å ID {broadcaster_id}")
    channel_info = make_request('/channels', {'broadcaster_id': broadcaster_id})
    if channel_info and channel_info.get('data'):
        logger.info(f"üì∫ –ö–∞–Ω–∞–ª: {channel_info['data'][0]['broadcaster_name']}")
        return channel_info['data'][0]
    logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å ID '{broadcaster_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None


def get_past_streams(user_id, limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
    past_streams = make_request('/videos', {'user_id': user_id, 'type': 'archive', 'first': limit})
    if past_streams and past_streams.get('data'):
        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(past_streams['data'])} –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π.")
        return past_streams['data']
    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—à–µ–¥—à–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –¥–ª—è ID '{user_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    return []


def get_stream_duration(vod_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∏–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

    Args:
        vod_id (str): ID —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.

    Returns:
        int: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∏–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
    """
    vod_info = get_times_stream_info(vod_id)

    if not vod_info or "duration" not in vod_info:
        return None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    duration_str = vod_info["duration"]  # –ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    match = re.match(r'(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?', duration_str)

    if not match:
        return None  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª

    hours = int(match.group(1)) if match.group(1) else 0
    minutes = int(match.group(2)) if match.group(2) else 0
    seconds = int(match.group(3)) if match.group(3) else 0

    return hours * 3600 + minutes * 60 + seconds


if __name__ == "__main__":
    example_username = "Olesha"

    user_info = get_user_info(example_username)
    if user_info:
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")

        user_id = user_info['id']
        past_streams = get_past_streams(user_id)
        if past_streams:
            for stream in past_streams:
                logger.info(f"üìº –ü—Ä–æ—à–ª–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è: {stream['title']} ({stream['id']})")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –¥–ª—è {example_username}.")