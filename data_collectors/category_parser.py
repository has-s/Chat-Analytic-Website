import re, os
import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from data_collectors.helix_api import get_stream_duration  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] [category_parser] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("category_parser")

# –ó–∞–≥—Ä—É–∑–∏–º .env.local.local –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if os.environ.get('FLASK_ENV') == 'development':
    load_dotenv('.env.local')
else:
    load_dotenv('.env.docker')

CHROMEDRIVER_PATH = os.getenv('CHROMEDRIVER_PATH')

def parse_data(video_id):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Å Twitch VOD."""

    service = Service(CHROMEDRIVER_PATH)
    options = Options()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--incognito')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--lang=en-US')
    options.add_experimental_option("prefs", {"intl.accept_languages": "en,en-US"})

    driver = webdriver.Chrome(service=service, options=options)
    url = f"https://www.twitch.tv/videos/{video_id}"

    try:
        logger.info(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {url}")
        driver.get(url)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        try:
            WebDriverWait(driver, 2).until(
                EC.presence_of_element_located((By.XPATH,
                                                "//*[contains(text(), \"Sorry. Unless you've got a time machine, that content is unavailable.\")]"))
            )
            logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ {video_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            return None
        except Exception:
            pass

        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "Start Watching", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        try:
            start_button = WebDriverWait(driver, 1).until(
                EC.element_to_be_clickable((By.XPATH,
                                            "//div[@data-a-target='tw-core-button-label-text' and contains(text(), 'Start Watching')]"))
            )
            start_button.click()
            logger.info("‚ñ∂Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Start Watching'.")
        except Exception:
            pass

        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "Continue Watching" –ø—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
        try:
            continue_button = WebDriverWait(driver, 1).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continue Watching')]"))
            )
            continue_button.click()
            logger.info("üîû –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Continue Watching'.")
        except Exception:
            pass

        # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(driver, 2).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
        html = driver.page_source
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None
    finally:
        driver.quit()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
    soup = BeautifulSoup(html, 'html.parser')
    return soup.get_text(separator=' ', strip=True)


def extract_info(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    share_pattern = re.compile(r'Share\s*(.*?)\s*¬∑')
    volume_pattern = re.compile(r'Volume(.*?)Volume', re.DOTALL)

    share_info = None
    volume_info = None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    share_match = share_pattern.search(text)
    if share_match:
        share_info = share_match.group(1).strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    volume_match = volume_pattern.search(text)
    if volume_match:
        volume_info_segment = volume_match.group(1).strip()
        volume_info_segment = re.sub(r'\bleft\s+', '', volume_info_segment)
        timestamps = re.findall(r'\b\d{2}:\d{2}:\d{2}\b', volume_info_segment)
        if timestamps:
            last_timestamp = timestamps[-1]
            last_index = volume_info_segment.rfind(last_timestamp)
            volume_info = volume_info_segment[last_index + len(last_timestamp):].strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    result = []
    if volume_info:
        items = volume_info.split(' ')
        i = 0

        while i < len(items):
            category = []
            while i < len(items) and not items[i].isdigit():
                category.append(items[i])
                i += 1

            time_str = []
            while i < len(items) and (
                    items[i].isdigit() or items[i] in ['hour', 'hours', 'minute', 'minutes', 'second', 'seconds']):
                time_str.append(items[i])
                i += 1

            if category and time_str:
                result.append((' '.join(category), ' '.join(time_str)))

    return share_info, result if result else None


def time_to_seconds(time_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã."""
    hours = int(re.search(r'(\d+)\s*hour', time_str).group(1)) if 'hour' in time_str else 0
    minutes = int(re.search(r'(\d+)\s*minute', time_str).group(1)) if 'minute' in time_str else 0
    seconds = int(re.search(r'(\d+)\s*second', time_str).group(1)) if 'second' in time_str else 0
    return hours * 3600 + minutes * 60 + seconds


def accumulate_seconds(pairs):
    """–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    accumulated = []
    total_seconds = 0

    for category, time_str in pairs:
        seconds = time_to_seconds(time_str)
        total_seconds += seconds
        accumulated.append((category, total_seconds))

    return accumulated


def format_categories(transitions):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ duration –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    categories = []

    for i, (category, end_time) in enumerate(transitions):
        if i == 0:
            duration = end_time  # –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏—Ç—Å—è —Å 0 –¥–æ `end_time`
        else:
            duration = end_time - transitions[i - 1][1]  # –†–∞–∑–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π

        categories.append({
            "category": category,
            "end_time": end_time,
            "duration": duration
        })

    return categories


def process_url(video_id):
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –≤–∏–¥–µ–æ."""
    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {video_id}.")
    page_text = parse_data(video_id)

    if not page_text:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–µ–æ {video_id}.")
        return None

    current_category, volume_pairs = extract_info(page_text)

    if volume_pairs:
        accumulated = accumulate_seconds(volume_pairs)
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(accumulated)} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return format_categories(accumulated)
    else:
        stream_duration = get_stream_duration(video_id)
        if stream_duration:
            return [{"category": current_category, "end_time": stream_duration, "duration": stream_duration}]
        else:
            return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    video_id = "2376580226"
    transitions = process_url(video_id)
    if transitions:
        for cat in transitions:
            logger.info(f"üìú {cat}")