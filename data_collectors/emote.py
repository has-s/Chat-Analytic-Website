import requests
from logging_config import setup_logger
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger("emote")

def fetch_ffz_emotes(channel_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ—Ü–∏–∏ FrankerFaceZ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    url = f"https://api.frankerfacez.com/v1/room/id/{channel_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        emotes = []
        for set_data in data.get("sets", {}).values():
            for emote in set_data.get("emoticons", []):
                emotes.append({
                    "name": emote["name"],
                    "url": emote["urls"].get("1", list(emote["urls"].values())[0])
                })

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(emotes)} —ç–º–æ—Ü–∏–π FFZ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}.")
        return emotes

    except requests.exceptions.HTTPError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ FFZ: {e}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ FFZ: {e}")
    except KeyError:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API FFZ –¥–ª—è {channel_id}.")

    return []


def fetch_bttv_emotes(channel_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ—Ü–∏–∏ BetterTTV –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    url = f"https://api.betterttv.net/3/cached/users/twitch/{channel_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        emotes = [
            {"name": e["code"], "url": f"https://cdn.betterttv.net/emote/{e['id']}/1x"}
            for e in data.get("channelEmotes", []) + data.get("sharedEmotes", [])
        ]

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(emotes)} —ç–º–æ—Ü–∏–π BTTV –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}.")
        return emotes

    except requests.exceptions.HTTPError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ BTTV: {e}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ BTTV: {e}")

    return []


def fetch_7tv_emotes(channel_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ—Ü–∏–∏ 7TV –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    url = f"https://7tv.io/v3/users/twitch/{channel_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        emotes = [
            {"name": e["name"], "url": f"https://cdn.7tv.app/emote/{e['id']}/1x"}
            for e in data.get("emote_set", {}).get("emotes", [])
        ]

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(emotes)} —ç–º–æ—Ü–∏–π 7TV –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}.")
        return emotes

    except requests.exceptions.HTTPError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ 7TV: {e}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ 7TV: {e}")

    return []


def load_emotes(channel_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —ç–º–æ—Ü–∏–∏ (FFZ, BTTV, 7TV) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    emotes = {"ffz": [], "bttv": [], "7tv": []}

    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–æ—Ü–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}...")

    emotes["ffz"] = fetch_ffz_emotes(channel_id)
    if not emotes["ffz"]:
        logger.warning(f"‚ö†Ô∏è –≠–º–æ—Ü–∏–∏ FFZ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    emotes["bttv"] = fetch_bttv_emotes(channel_id)
    if not emotes["bttv"]:
        logger.warning(f"‚ö†Ô∏è –≠–º–æ—Ü–∏–∏ BTTV –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    emotes["7tv"] = fetch_7tv_emotes(channel_id)
    if not emotes["7tv"]:
        logger.warning(f"‚ö†Ô∏è –≠–º–æ—Ü–∏–∏ 7TV –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–æ—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: FFZ={len(emotes['ffz'])}, BTTV={len(emotes['bttv'])}, 7TV={len(emotes['7tv'])}.")
    return emotes


if __name__ == "__main__":
    channel_id = "53815140"  # –ü—Ä–∏–º–µ—Ä ID –∫–∞–Ω–∞–ª–∞
    emotes = load_emotes(channel_id)
    print(json.dumps(emotes, indent=4, ensure_ascii=False))