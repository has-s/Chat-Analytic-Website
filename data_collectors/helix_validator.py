import requests
import os
from dotenv import load_dotenv
from logging_config import setup_logger

# –õ–æ–≥–≥–µ—Ä
logger = setup_logger("helix_validator")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
PROJECT_ROOT = os.getenv('PROJECT_ROOT')
CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")

TOKEN_FILE = os.path.join(PROJECT_ROOT, 'config/.helix_token')
VALIDATION_URL = "https://id.twitch.tv/oauth2/validate"


def save_token_to_file(token):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª."""
    try:
        with open(TOKEN_FILE, "w") as file:
            file.write(token)
        logger.info(f"üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª {TOKEN_FILE}")
    except IOError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {e}")


def load_token_from_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if os.path.exists(TOKEN_FILE):
        try:
            with open(TOKEN_FILE, "r") as file:
                return file.read().strip()
        except IOError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
    return None


def is_token_valid(token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é Helix API."""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(VALIDATION_URL, headers=headers)
        if response.status_code == 200:
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
            return True
        logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {response.status_code} - {response.json().get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
        return False
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False


def get_helix_token(client_id, client_secret):
    """–ü–æ–ª—É—á–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ."""
    existing_token = load_token_from_file()
    if existing_token and is_token_valid(existing_token):
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return existing_token

    url = "https://id.twitch.tv/oauth2/token"
    payload = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials'
    }

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
        data = response.json()
        token = data.get('access_token')

        if token:
            logger.info("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            save_token_to_file(token)
            return token
        logger.error("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        return None
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


if __name__ == "__main__":
    if not CLIENT_ID or not CLIENT_SECRET:
        logger.critical("üö´ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TWITCH_CLIENT_ID –∏–ª–∏ TWITCH_CLIENT_SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        exit(1)

    token = get_helix_token(CLIENT_ID, CLIENT_SECRET)
    if token:
        logger.info(f"üìÅ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {TOKEN_FILE}")
    else:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.")