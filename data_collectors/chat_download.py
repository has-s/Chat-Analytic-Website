import requests
import json
import os
from dotenv import load_dotenv
from logging_config import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger("chat_downloader")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
# –ó–∞–≥—Ä—É–∑–∏–º .env.local.local –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if os.environ.get('FLASK_ENV') == 'development':
    load_dotenv('.env.local')
else:
    load_dotenv('.env.docker')

PROJECT_ROOT = os.getenv('PROJECT_ROOT')
CHAT_CLIENT_ID = os.getenv("CHAT_CLIENT_ID")
CHAT_CLIENT_SHA = os.getenv("CHAT_CLIENT_SHA")

if not CHAT_CLIENT_ID or not CHAT_CLIENT_SHA:
    logger.critical("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã CHAT_CLIENT_ID –∏ CHAT_CLIENT_SHA –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã.")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º PROJECT_ROOT –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
OUTPUT_DIR = os.path.join(PROJECT_ROOT, 'chats')
os.makedirs(OUTPUT_DIR, exist_ok=True)


def get_chat_file_path(video_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —á–∞—Ç–∞."""
    return os.path.join(OUTPUT_DIR, f"{video_id}.json")


def load_chat_from_file(video_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    chat_file = get_chat_file_path(video_id)
    if os.path.exists(chat_file):
        logger.info(f"üìÇ –ß–∞—Ç –¥–ª—è {video_id} –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.")
        try:
            with open(chat_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except (IOError, json.JSONDecodeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
            return None
    return None


def download_chat_to_file(video_id, start=0, force_download=False):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —á–∞—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.

    Args:
        video_id (str): ID –≤–∏–¥–µ–æ.
        start (int): –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        force_download (bool): –ï—Å–ª–∏ True, –∑–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç –∑–∞–Ω–æ–≤–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç –≤ —Ñ–∞–π–ª–µ
    if not force_download:
        existing_chat = load_chat_from_file(video_id)
        if existing_chat is not None:
            return existing_chat

    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ {video_id}. (–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: {force_download})")
    headers = {"Client-ID": CHAT_CLIENT_ID}
    comments_dict = {}
    cursor = None

    while True:
        payload = {
            "operationName": "VideoCommentsByOffsetOrCursor",
            "variables": {"videoID": video_id, "contentOffsetSeconds": start},
            "extensions": {
                "persistedQuery": {"version": 1, "sha256Hash": CHAT_CLIENT_SHA}
            }
        }
        if cursor:
            payload["variables"]["cursor"] = cursor

        try:
            response = requests.post("https://gql.twitch.tv/gql", headers=headers, json=payload)
            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

        comments = data.get("data", {}).get("video", {}).get("comments", {}).get("edges", [])
        if not comments:
            logger.warning("‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö.")
            break

        for comment in comments:
            node = comment["node"]
            if not node.get("commenter"):
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
                continue

            comment_id = node["id"]
            if comment_id not in comments_dict:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ–π–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                badges = [
                    {"set_id": badge["setID"], "version": badge["version"]}
                    for badge in node["message"].get("userBadges", [])
                ]

                comments_dict[comment_id] = {
                    "_id": comment_id,
                    "created_at": node["createdAt"],
                    "content_offset_seconds": node["contentOffsetSeconds"],
                    "commenter": {
                        "display_name": node["commenter"]["displayName"].strip(),
                        "_id": node["commenter"]["id"],
                        "name": node["commenter"]["login"]
                    },
                    "message": {
                        "body": "".join(frag["text"] for frag in node["message"]["fragments"] if frag["text"]),
                        "user_color": node["message"]["userColor"],
                        "badges": badges  # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂–∏
                    }
                }

        page_info = data.get("data", {}).get("video", {}).get("comments", {}).get("pageInfo", {})
        if not page_info.get("hasNextPage"):
            logger.info("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —á–∞—Ç–∞.")
            break

        cursor = comments[-1]["cursor"]

    unique_comments = list(comments_dict.values())
    logger.info(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(unique_comments)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    output_path = get_chat_file_path(video_id)
    try:
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(unique_comments, f, ensure_ascii=False, indent=4)
        logger.info(f"‚úÖ –ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}.")
    except IOError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

    return unique_comments


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    video_id = "2406296141"
    force_reload = True  # –£—Å—Ç–∞–Ω–æ–≤–∏ True, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç –∑–∞–Ω–æ–≤–æ

    comments = download_chat_to_file(video_id, force_download=force_reload)

    if comments:
        logger.info(f"üéâ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.")
    else:
        logger.warning("‚ùå –ß–∞—Ç –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")